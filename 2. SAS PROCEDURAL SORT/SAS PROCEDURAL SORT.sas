/* PROCEDURAL SORT: */


/* IT ORDERS THE OBSERVATIONS IN DATA/TABLE IN INCREASING/DECREASING ORDER BY  */
/* ONE OR MORE CHARACTER/NUMERIC VARIABLES/COLUMNS. */

PROC SORT DATA=WORK.CUST;
BY COUNTRY;
RUN;

PROC SORT DATA=WORK.CUST;
BY COUNTRY;
BY SALARY;
RUN;

/* OTHER WAY */

PROC SORT DATA=WORK.CUST;
BY COUNTRY SALARY;

RUN;



/* OPTIONS: */

/* OUT: */
/* IT SORT THE DATA AND STORE IT TO ANOTHER TABLE. BUT THE MAIN TABLE NOT SORTED */
PROC SORT DATA=WORK.CUST OUT=SORTED;
BY COUNTRY SALARY;

RUN;


/* DESCENDING: */
/* IT SORT THE DATA IN DESCENDING ORDER */
PROC SORT DATA=WORK.CUST OUT=SORTED;
BY DESCENDING COUNTRY SALARY;

RUN;


/* NODUPKEY: */

/* REMOVE THE DUPLICATES BASICS OF ONE COLUMN. */
/* DELETE OBSERVATIONS WITH COMMON VALUES IN "BY" VARIABLE/VARIABLES. */

PROC SORT DATA=WORK.CUST NODUPKEY OUT=SORTED;
BY  COUNTRY;

RUN;


/* NODUP: */

/* DELETE OBSERVATIONS WITH COMMON VALUES IN ALL THE VARIABLES. */

PROC SORT DATA=WORK.CUST NODUP OUT=SORTED;
BY  COUNTRY;

RUN;


/* OTHER CRITERIA: */
/* IT COMPARE ALL DUPLICATE DATA AND GIVE THE OUTPUT */

PROC SORT DATA=WORK.CUST NODUP OUT=SORTED ;
BY  _ALL_;

RUN;



/* DUPOUT: */
/* PRODUCE THE DUPLICATES VALUES, IDENTIFIED BY NODUPKEY/NODUP, IN A SEPARATE TABLE. */
/* THE DUPLICATE VALUES ARE STORE IN ANOTHER TABLE */

PROC SORT DATA=WORK.CUST NODUP OUT=SORTED DUPOUT=DUP ;
BY  _ALL_;

RUN;








